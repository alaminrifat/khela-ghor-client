import React from "react";

const Answers = () => {
    return (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <article className="rounded-lg border border-gray-100 bg-white p-4 shadow-sm transition hover:shadow-lg sm:p-6">
                <a href="#">
                    <h3 className="mt-0.5 text-lg font-medium text-gray-900">
                        1. What is an access token and refresh token? How do
                        they work and where should we store them on the
                        client-side?
                    </h3>
                </a>

                <p className="mt-1  ">
                    <b>Access token:</b> A short-lived credential that grants
                    permission to access protected resources. It is included in
                    API requests for authentication. <br />{" "}
                    <b>Refresh token:</b> A long-lived credential used to obtain
                    a new access token when the current one expires. It is
                    securely stored on the client-side and sent to the server
                    for token renewal.
                    <br /> <b>Storage on the client-side:</b> Access tokens can
                    be stored in memory, browser cookies, or local storage.
                    Refresh tokens should be securely stored, typically in an
                    HttpOnly cookie or a secure server-side session.
                    <br />
                    <b>Working procedure:</b> When a user logs in or
                    authenticates, an access token and a refresh token are
                    generated by the authentication server. The access token is
                    provided to the client and included with subsequent API
                    requests to authorize access to protected resources. If the
                    access token expires or becomes invalid, the client can use
                    the refresh token to request a new access token from the
                    authentication server without requiring the user to
                    reauthenticate. The server verifies the refresh token and
                    issues a new access token, allowing the client to continue
                    accessing protected resources.
                </p>
            </article>
            <article className="rounded-lg border border-gray-100 bg-white p-4 shadow-sm transition hover:shadow-lg sm:p-6">
                <a href="#">
                    <h3 className="mt-0.5 text-lg font-medium text-gray-900">
                        2. Compare SQL and NoSQL databases?
                    </h3>
                </a>

                <p className="mt-1  ">
                    <b>SQL: </b> SQL databases are primarily called Relational
                    Databases (RDBMS). These databases have fixed or static or
                    predefined schema. These databases are not suited for
                    hierarchical data storage.These databases are best suited
                    for complex queries.SQL are Vertically Scalable.
                    <br /> <br />
                    <b>NoSQL: </b>NoSQL databases are primarily called
                    non-relational or distributed databases. They have a dynamic
                    schema.These databases are best suited for hierarchical data
                    storage. These databases are not so good for complex
                    queries.NoSQL are Horizontally scalable.
                </p>
            </article>
            <article className="rounded-lg border border-gray-100 bg-white p-4 shadow-sm transition hover:shadow-lg sm:p-6">
                <a href="#">
                    <h3 className="mt-0.5 text-lg font-medium text-gray-900">
                        3. What is express js? What is Nest JS?
                    </h3>
                </a>

                <p className="mt-1  ">
                    <b>Express.js </b> is a popular platform for building web
                    applications on top of Node.js. It makes making web apps and
                    APIs easy and simple. Express.js has a lot of tools for
                    handling HTTP requests and responses, routing, middleware,
                    and template engines. It makes it easy and quick for
                    developers to make server-side apps that can be used in many
                    different ways. Express.js is used by a lot of people to
                    build web apps, RESTful APIs, and microservices because it
                    has a large ecosystem and a lot of community support.
                    <br /> <br />
                    <b>NestJS,</b> on the other hand, is a framework for making
                    server-side applications using TypeScript that is modern and
                    can be expanded. It is built on top of Express.js and uses
                    ideas from Angular, like dependency injection and
                    decorators. NestJS is built using the modular architecture
                    pattern, which lets writers organize their code into
                    modules, controllers, and services. It comes with features
                    like routing, middleware, validation, and authentication
                    right out of the box, which makes it easy to build
                    applications that are scalable and easy to manage. NestJS is
                    often used in enterprise-level projects or when building
                    complex server-side applications that need a structured and
                    scalable method.
                </p>
            </article>
            <article className="rounded-lg border border-gray-100 bg-white p-4 shadow-sm transition hover:shadow-lg sm:p-6">
                <a href="#">
                    <h3 className="mt-0.5 text-lg font-medium text-gray-900">
                        4. What is MongoDB aggregate and how does it work?
                    </h3>
                </a>

                <p className="mt-1  ">
                    Aggregations operations process data records and return
                    computed results. Aggregation operations group values from
                    multiple documents together, and can perform a variety of
                    operations on the grouped data to return a single
                    result.
                    <br /> Aggregation is a way of processing a large number of
                    documents in a collection by means of passing them through
                    different stages. The stages make up what is known as a
                    pipeline. The stages in a pipeline can filter, sort, group,
                    reshape and modify documents that pass through the pipeline.
                    MongoDB allows you to perform a variety of aggregation
                    operations. These allow you to process data records in a
                    variety of ways, such as grouping data, sorting data into a
                    specific order, or restructuring returned documents, as well
                    as filtering data as one might with a query.
                </p>
            </article>
        </div>
    );
};

export default Answers;
